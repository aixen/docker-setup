services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:cached
      - ./services/authentication/application:/var/www/authentication:cached
      - ./services/gateway/application:/var/www/gateway:cached
    depends_on:
      - php
      - app-authentication
    networks:
      - mynetwork

  php:
    build:
      context: ./php
      dockerfile: Dockerfile
    volumes:
      - ./services/authentication/application:/var/www/authentication:cached
      - ./services/gateway/application:/var/www/gateway:cached
    environment:
      - PHP_VERSION=8.2
      - XDEBUG_MODE=debug,develop
      - XDEBUG_CONFIG=client_host=host.docker.internal client_port=9003
    privileged: false
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "php", "-v"]
      interval: 15s
      retries: 5
    networks:
      - mynetwork

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_INITDB_SKIP_TZINFO: 1
    # volumes:
    #   - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - mynetwork

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./redis/users.acl:/data/users.acl
    command: redis-server --requirepass secret --aclfile /data/users.acl
    networks:
      - mynetwork

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ELASTIC_PASSWORD=secret
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - mynetwork

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_root
      - ELASTICSEARCH_PASSWORD=secret
    depends_on:
      - elasticsearch
    networks:
      - mynetwork

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline.yml:/usr/share/logstash/config/pipelines.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./services/gateway/application/storage/logs:/var/log/laravel
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=secret
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - mynetwork
    command: sh -c "sleep 30 && /usr/share/logstash/bin/logstash"

  # Temporary Removed since it is a persistent issues occured
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.3.0
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "2181:2181"
  #   healthcheck:
  #     test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
  #     interval: 10s
  #     retries: 5
  #     start_period: 20s
  #   networks:
  #     - mynetwork

  # kafka:
  #   image: confluentinc/cp-kafka:7.3.0
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  #   depends_on:
  #     # - zookeeper
  #     zookeeper:
  #       condition: service_healthy
  #   networks:
  #     - mynetwork
  #   command: sh -c "sleep 30 && /etc/confluent/docker/run"

  # Microservices setup
  gateway-workspace:
    build:
      context: ./services/gateway/workspace
      dockerfile: Dockerfile
    container_name: gateway-workspace
    volumes:
      - ./services/gateway/application:/var/www/gateway
    working_dir: /var/www/gateway
    depends_on:
      - php
    command: tail -f /dev/null
    networks:
      - mynetwork

  app-gateway:
    build:
      context: ./services/gateway/application
      dockerfile: Dockerfile
    container_name: app-gateway
    ports:
      - "8080:80"
    volumes:
      - ./services/gateway/application:/var/www/gateway
    environment:
      - APP_ENV=local
    depends_on:
      - mysql
      - redis
      - authentication-nginx
    command: >
      sh -c "chmod -R 777 storage bootstrap/cache && php-fpm"
    networks:
      - mynetwork

  authentication-workspace:
    build:
      context: ./services/authentication/workspace
      dockerfile: Dockerfile
    container_name: authentication-workspace
    volumes:
      - ./services/authentication/application:/var/www/authentication
    working_dir: /var/www/authentication
    depends_on:
      - php
    command: tail -f /dev/null
    networks:
      - mynetwork

  app-authentication:
    build:
      context: ./services/authentication/application
      dockerfile: Dockerfile
    container_name: app-authentication
    volumes:
      - ./services/authentication/application:/var/www/authentication
    working_dir: /var/www/authentication
    environment:
      - APP_ENV=local
    depends_on:
      - mysql
      - redis
    command: >
      sh -c "chmod -R 777 storage bootstrap/cache && php-fpm"
    networks:
      - mynetwork

  authentication-nginx:
    image: nginx:latest
    container_name: authentication-nginx
    ports:
      - "8081:80"
    volumes:
      - ./nginx/auth.conf:/etc/nginx/conf.d/default.conf
      - ./services/authentication/application:/var/www/authentication
    depends_on:
      - app-authentication
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
